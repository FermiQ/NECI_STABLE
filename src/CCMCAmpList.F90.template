[int]
type1=integer
unity=1
size=8

[doub]
type1=real(dp)
unity=1.0_dp
size=8

===================
#include "macros.h"


module AmpList
   use memorymanager, only: LogMemAlloc, LogMemDealloc
   use Determinants, only: get_helement, write_det, write_det_len
   use constants, only: dp, int32, n_int
   use bit_rep_data, only: NIfDBO,NIfD,NIfTot
   use CCMCData, only: ExcitToDetSign,AddBitExcitor
   use Parallel_neci
   use MemoryManager, only: TagIntType
   implicit none

   type AmplitudeList_%(name)s
      %(type1)s, pointer ::   Amplitude(:,:)
      %(type1)s, pointer ::   CumlAmplitude(:)
#ifdef __CMPLX
      logical, pointer   ::   IsImag(:,:)
      integer(TagIntType) :: tagIsImag
#endif
      integer(TagIntType) :: tagAmplitude
      integer(TagIntType) :: tagCumlAmplitude
      logical bShared
   end type


contains

   subroutine AllocateAmplitudeList (AL,nAmpl,nLists,tShared)
      use shared_alloc
      CHARACTER(len=*), PARAMETER :: this_routine='AllocateAmplitudeList_%(name)s'
      Type(AmplitudeList_%(name)s) AL
      logical tShared
      integer nAmpl,nLists
      integer arrdim(2),arrdim1(1)
      arrdim1(1)=nAmpl
      arrdim(1)=nAmpl
      arrdim(2)=nLists
      AL%%bShared=tShared
      if(tShared) then
         call shared_allocate("CCMCAmps",AL%%Amplitude,arrdim, iNodeIndex)
         LogAlloc(ierr,'AL%%Amplitude',nAmpl*nLists,%(size)s,AL%%tagAmplitude)
         call shared_allocate("CumlAmps",AL%%CumlAmplitude,arrdim1, iNodeIndex)
         LogAlloc(ierr,'AL%%CumlAmplitude',nAmpl,%(size)s,AL%%tagCumlAmplitude)
#ifdef __CMPLX
         call shared_allocate("CCMCIsImag",AL%%IsImag,arrdim, iNodeIndex)
         LogAlloc(ierr,'AL%%IsImag',nAmpl*nLists,%(size)s,AL%%tagIsImag)
#endif
      else
         Allocate(AL%%Amplitude(nAmpl,nLists))
         LogAlloc(ierr,'AL%%Amplitude',nAmpl*nLists,%(size)s,AL%%tagAmplitude)
         Allocate(AL%%CumlAmplitude(nAmpl))
         LogAlloc(ierr,'AL%%CumlAmplitude',nAmpl,%(size)s,AL%%tagCumlAmplitude)
#ifdef __CMPLX
         Allocate(AL%%IsImag(nAmpl,nLists))
         LogAlloc(ierr,'AL%%IsImag',nAmpl*nLists,%(size)s,AL%%tagIsImag)
#endif
      endif
   end subroutine ! AllocateAmplitudeList 

   subroutine DeallocateAmplitudeList (AL)
      use shared_alloc
      CHARACTER(len=*), PARAMETER :: this_routine='DeallocateAmplitudeList_%(name)s'
      Type(AmplitudeList_%(name)s) AL
      LogDealloc(AL%%tagAmplitude)
      if(AL%%bShared) then
         call shared_deallocate(AL%%Amplitude)
         call shared_deallocate(AL%%CumlAmplitude)
#ifdef __CMPLX
         call shared_deallocate(AL%%IsImag)
#endif
      else
         LogDealloc(AL%%tagCumlAmplitude)
         Deallocate(AL%%CumlAmplitude)
         LogDealloc(AL%%tagAmplitude)
         Deallocate(AL%%Amplitude)
#ifdef __CMPLX
         LogDealloc(AL%%tagIsImag)
         Deallocate(AL%%IsImag)
#endif
      endif
   end subroutine !DeallocateAmplitudeList 


!Writes out an excitor list of reals whose values are >=dTol
subroutine WriteExcitorList (iUnit,AL,iAmpList,Dets,offset,nDet,dTol,Title)
   use FciMCData, only: iLutHF
   IMPLICIT NONE
   INTEGER iUnit,nDet
   INTEGER(KIND=n_int) Dets(0:nIfTot,nDet)
   type(AmplitudeList_%(name)s) AL
   %(type1)s dTol
   INTEGER iAmpList
   CHARACTER(len=*) Title
   INTEGER j,offset
   write(6,*) Title
   do j=1,nDet
      if(abs(AL%%Amplitude(j,iAmpList)).ge.dTol) THEN
#ifdef __CMPLX
         write(iUnit,'(I7,G17.9," ",L3," ")',advance='no') j+offset,AL%%Amplitude(j,iAmpList),AL%%IsImag(j,iAmpList)
#else
         write(iUnit,'(I7,G17.9," ")',advance='no') j+offset,AL%%Amplitude(j,iAmpList)
#endif
         call WriteBitEx(iUnit,iLutHF,Dets(:,j),.true.)
      ENDIF
   enddo
end subroutine !WriteExcitorList

!Writes out an excitor list of reals whose values are >=dTol
subroutine WriteExcitorListA (iUnit,Amps,Dets,offset,nDet,dTol,Title)
   use FciMCData, only: iLutHF
   IMPLICIT NONE
   INTEGER iUnit,nDet
   INTEGER(KIND=n_int) Dets(0:nIfTot,nDet)
   %(type1)s dTol,Amps(:)
   CHARACTER(len=*) Title
   INTEGER j,offset
   write(6,*) Title
   do j=1,nDet
      if(abs(Amps(j)).ge.dTol) THEN
         write(iUnit,'(I7,G17.9," ")',advance='no') j+offset,Amps(j)
         call WriteBitEx(iUnit,iLutHF,Dets(:,j),.true.)
      ENDIF
   enddo
end subroutine !WriteExcitorList

pure function GetAmpl(AL,iIndex,iAmpList) result(r)
   type(AmplitudeList_%(name)s), intent(in) :: AL
   INTEGER, intent(in) ::  iAmpList,iIndex
   %(type1)s, dimension(lenof_sign) :: r
   
   if (iIndex > 0) then
#ifdef __CMPLX
       r = 0
       if(AL%%IsImag(iIndex,iAmpList)) then
          r(1)=AL%%Amplitude(iIndex,iAmpList)
       else
          r(2)=AL%%Amplitude(iIndex,iAmpList)
       endif
#else
       r(1)=AL%%Amplitude(iIndex,iAmpList)
#endif
    else
        r = 0
    end if
end function !GetAmpl

subroutine SetAmpl(AL,iIndex,iAmpList,r)
   type(AmplitudeList_%(name)s), intent(inout) :: AL
   INTEGER, intent(in) ::  iAmpList,iIndex
   %(type1)s, dimension(lenof_sign) ::  r
#ifdef __CMPLX
   if(r(1)/=0) then
      AL%%Amplitude(iIndex,iAmpList)=r(1)
      AL%%IsImag(iIndex,iAmpList)=.false.
   else
      AL%%Amplitude(iIndex,iAmpList)=r(2)
      AL%%IsImag(iIndex,iAmpList)=.true.
   endif
#else
   AL%%Amplitude(iIndex,iAmpList)=r(1)
#endif
   return 
end subroutine !SetAmpl

end module

supermodule AmpList

   use constants, only: n_int
   use MemoryManager, only: TagIntType

   type AmplitudeList_btrp
      integer(kind=n_int), pointer, dimension(:,:) ::   BitReps
      integer, pointer ::   CumlAmplitude(:)
      integer(TagIntType) :: tagAmplitude
      integer(TagIntType) :: tagCumlAmplitude
      logical bShared
   end type



   interface AllocateAmplitudeList
      module procedure AllocateAmplitudeList_btrp
   end interface 
   interface DeallocateAmplitudeList
      module procedure DeallocateAmplitudeList_btrp
   end interface 
   interface WriteExcitorList
      module procedure WriteExcitorList_btrp
   end interface 
   interface GetAmpl
      module procedure GetAmpl_btrp
   end interface 
   interface SetAmpl
      module procedure SetAmpl_btrp
   end interface 

Contains

   subroutine AllocateAmplitudeList_btrp(AL,nAmpl,nLists,tShared,DetList)
      use shared_alloc
      CHARACTER(len=*), PARAMETER :: this_routine='AllocateAmplitudeList_btrp'
      INTEGER(kind=n_int), pointer :: DetList(:,:)
      Type(AmplitudeList_btrp) AL
      logical tShared
      integer nAmpl,nLists
      integer arrdim(2),arrdim1(1)
      arrdim1(1)=nAmpl
      arrdim(1)=nAmpl
      arrdim(2)=nLists
      AL%bShared=tShared
      AL%BitReps=>DetList
      if(tShared) then
         call shared_allocate("CumlAmps",AL%CumlAmplitude,arrdim1,iNodeIndex)
         LogAlloc(ierr,'AL%CumlAmplitude',nAmpl,4,AL%tagCumlAmplitude)
      else
         Allocate(AL%CumlAmplitude(nAmpl))
         LogAlloc(ierr,'AL%CumlAmplitude',nAmpl,4,AL%tagCumlAmplitude)
      endif
   end subroutine ! AllocateAmplitudeList 


   subroutine DeallocateAmplitudeList_btrp(AL)
      use shared_alloc
      CHARACTER(len=*), PARAMETER :: this_routine='DeallocateAmplitudeList_btrp'
      Type(AmplitudeList_btrp) AL
      if(AL%bShared) then
         call shared_deallocate(AL%CumlAmplitude)
      else
         LogDealloc(AL%tagCumlAmplitude)
         Deallocate(AL%CumlAmplitude)
      endif
   end subroutine !DeallocateAmplitudeList 


!Writes out a compressed excitor list where signs are contained within the Particles and whose values are >=dTol
subroutine WriteExcitorList_btrp(iUnit,AL,iAmpList,Dets,offset,nDet,dTol,Title)
   use FciMCData, only: iLutHF
   use bit_reps, only: extract_flags
   use bit_rep_data, only: nIfTot, extract_sign
   use constants, only: lenof_sign
   IMPLICIT NONE
   INTEGER iUnit,nDet
   Type(AmplitudeList_btrp) AL
   integer iAmpList
   INTEGER(KIND=n_int) Dets(0:nIfTot,nDet)
   integer dTol
   CHARACTER(len=*) Title
   INTEGER j,offset
   real(dp) :: amp(lenof_sign)
   write(6,*) Title
   do j=1,nDet
      call extract_sign(AL%BitReps(:,j),Amp)
      if(abs(Amp(1)).ge.dTol) THEN
#ifdef __CMPLX
         write(iUnit,'(I7,2G17.9," ")',advance='no') j+offset,Amp(1),Amp(2)
#else
         write(iUnit,'(I7,G17.9," ")',advance='no') j+offset,Amp(1)
#endif
         call WriteBitEx(iUnit,iLutHF,AL%BitReps(:,j),.false.)
         write(iUnit,'(I7)') extract_flags(AL%BitReps(:,j))
      ENDIF
   enddo
end subroutine !WriteExcitorList

pure function GetAmpl_btrp(AL,iIndex,iAmpList) result(r)
   use bit_reps, only: extract_sign
   use constants, only: lenof_sign
   type(AmplitudeList_btrp), intent(in) :: AL
   INTEGER, intent(in) ::  iAmpList,iIndex
   real(dp) :: r(lenof_sign)
   if (iIndex < 0) then
       r = 0
   else
       call extract_sign(AL%BitReps(:,iIndex),r)
   end if
end function !GetAmpl

subroutine SetAmpl_btrp(AL,iIndex,iAmpList,r)
   use bit_reps, only: encode_sign
   type(AmplitudeList_btrp), intent(inout) :: AL
   INTEGER, intent(in) ::  iAmpList,iIndex
   real(dp), intent(in) :: r(lenof_sign)
   call encode_sign(AL%BitReps(:,iIndex),r)
end subroutine !SetAmpl

end supermodule
