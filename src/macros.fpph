#:mute

#:def unused_var(*args)
#ifdef WARNING_WORKAROUND_
    #:for arg in args
        associate(${arg}$ => ${arg}$); end associate
    #:endfor
#endif
#:enddef unused_var

#:def safe_deallocate(*args)
    #:for arg in args
        if(allocated(${arg}$)) deallocate(${arg}$)
    #:endfor
#:enddef safe_deallocate

#:def log_alloc(arr, tag, ierr)
block
    use constants, only: int64
    use util_mod, only: operator(.div.)
    if (${ierr}$ /= 0) then
        call stop_all(this_routine, 'Error in allocation of ${arr}$.')
    end if
    $:'call LogMemAlloc("{arr}", size({arr}, kind=int64), int(sizeof({arr}), kind=int64) .div. size({arr}, kind=int64), this_routine, {tag}, {ierr})'.format(arr=arr, tag=tag, ierr=ierr)
end block
#:enddef

#:def def_default(Var_, Var, Val)
if(present(${Var}$)) then
    ${Var_}$ = ${Var}$
else
    ${Var_}$ = ${Val}$
endif
#:enddef

#:def ASSERT(cond, *args)
#ifdef DEBUG_
    block
        use util_mod, only: stop_all
        use constants, only: stderr
        if (.not. (${cond}$)) then
            write(stderr, *) ""
            write(stderr, *) "Assertion ${cond}$"
            write(stderr, *) "failed in ${_FILE_}$:${_LINE_}$"
#:if args
            write(stderr, *) "Values leading to this error:"
#:for value in args
            write(stderr, *) "${value}$ = ", ${value}$
#:endfor
#:endif
            call stop_all (this_routine, "Assert fail: ${cond}$")
        end if
    end block
#endif
#:enddef


#:def pure_ASSERT(cond, import_stop_all='True')
#:set import_stop_all = import_stop_all == 'True'
#ifdef DEBUG_
    block
#! This is there to use pure_ASSERT in the util_mod as well.
#! Would cause circular imports otherwise.
#:if import_stop_all
        use util_mod, only: stop_all
#:endif
        if (.not. (${cond}$)) then
            call stop_all (this_routine, "Assert fail: ${cond}$")
        end if
    end block
#endif
#:enddef

#:endmute
