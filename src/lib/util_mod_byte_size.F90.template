# Avoid the automatic type resizing performed for quicksort by using a
# replace string atype, rather than type
#[int]
#useline = !
#atype = integer(int32)
#sz = sizeof_int32
#
#[int64]
#atype = integer(int64)
#sz = sizeof_int64
#
#[real]
#atype = real(sp)
#sz = sizeof_sp
#
#[doub]
#atype = real(dp)
#sz = sizeof_dp
#
#[logical]
#atype = logical
#sz = sizeof_int32
#
#[cplx]
#atype = complex(kind=sp)
#sz = (2*sizeof_sp)
#
#[cplx_doub]
#atype = complex(kind=dp)
#sz = (2*sizeof_dp)
#
[int_1]
useline = !
atype = integer(int32), dimension(:)
sz = sizeof_int32

[int64_1]
atype = integer(int64), dimension(:)
sz = sizeof_int64

[real_1]
atype = real(sp), dimension(:)
sz = sizeof_sp

[doub_1]
atype = real(dp), dimension(:)
sz = sizeof_dp

[logical_1]
atype = logical, dimension(:)
sz = sizeof_int32

[cplx_1]
atype = complex(kind=sp), dimension(:)
sz = (2*sizeof_sp)

[cplx_doub_1]
atype = complex(kind=dp), dimension(:)
sz = (2*sizeof_dp)

[int_2]
atype = integer(int32), dimension(:,:)
sz = sizeof_int32

[int64_2]
atype = integer(int64), dimension(:,:)
sz = sizeof_int64

[real_2]
atype = real(sp), dimension(:,:)
sz = sizeof_sp

[doub_2]
atype = real(dp), dimension(:,:)
sz = sizeof_dp

[logical_2]
atype = logical, dimension(:,:)
sz = sizeof_int32

[cplx_2]
atype = complex(kind=sp), dimension(:,:)
sz = (2*sizeof_sp)

[cplx_doub_2]
atype = complex(kind=dp), dimension(:,:)
sz = (2*sizeof_dp)

[int_3]
atype = integer(int32), dimension(:,:,:)
sz = sizeof_int32

[int64_3]
atype = integer(int64), dimension(:,:,:)
sz = sizeof_int64

[real_3]
atype = real(sp), dimension(:,:,:)
sz = sizeof_sp

[doub_3]
atype = real(dp), dimension(:,:,:)
sz = sizeof_dp

[logical_3]
atype = logical, dimension(:,:,:)
sz = sizeof_int32

[cplx_3]
atype = complex(kind=sp), dimension(:,:,:)
sz = (2*sizeof_sp)

[cplx_doub_3]
atype = complex(kind=dp), dimension(:,:,:)
sz = (2*sizeof_dp)

[int_4]
atype = integer(int32), dimension(:,:,:,:)
sz = sizeof_int32

[int64_4]
atype = integer(int64), dimension(:,:,:,:)
sz = sizeof_int64

[real_4]
atype = real(sp), dimension(:,:,:,:)
sz = sizeof_sp

[doub_4]
atype = real(dp), dimension(:,:,:,:)
sz = sizeof_dp

[logical_4]
atype = logical, dimension(:,:,:,:)
sz = sizeof_int32

[cplx_4]
atype = complex(kind=sp), dimension(:,:,:,:)
sz = (2*sizeof_sp)

[cplx_doub_4]
atype = complex(kind=dp), dimension(:,:,:,:)
sz = (2*sizeof_dp)

[int_5]
atype = integer(int32), dimension(:,:,:,:,:)
sz = sizeof_int32

[int64_5]
atype = integer(int64), dimension(:,:,:,:,:)
sz = sizeof_int64

[real_5]
atype = real(sp), dimension(:,:,:,:,:)
sz = sizeof_sp

[doub_5]
atype = real(dp), dimension(:,:,:,:,:)
sz = sizeof_dp

[logical_5]
atype = logical, dimension(:,:,:,:,:)
sz = sizeof_int32

[cplx_5]
atype = complex(kind=sp), dimension(:,:,:,:,:)
sz = (2*sizeof_sp)

[cplx_doub_5]
atype = complex(kind=dp), dimension(:,:,:,:,:)
sz = (2*sizeof_dp)

# Disable this in master, as it doesn't exist there.
## n.b. we have to take a (bad) guess at the 'size' of a pointer.
#[p_c_st]
#useline = use FciMCData, only: proj_coeff_store_t
#atype = type(proj_coeff_store_t), dimension(:)
#sz = ((2*sizeof_int) + (2 * 2 * sizeof_int64))

=========================

module util_mod_byte_size
    use constants
    ! HACK: The following line is just to get module dependencies working.
    use FciMCData
    %(useline)s
    implicit none

    interface tbs_
        module procedure type_byte_size_%(name)s
    end interface

contains

    pure function type_byte_size (var) result(byte_sz)

        ! How many bytes are there per element of var?

        %(atype)s, intent(in) :: var
        integer :: byte_sz
        
        byte_sz = %(sz)s

    end function

    pure function byte_size (var) result(byte_sz)

        ! How big is var in bytes. If we want to make this work for non-arrays
        ! we will need some funky trickery...

        %(atype)s, intent(in) :: var
        integer :: byte_sz

        byte_sz = size(var) * %(sz)s

    end function

end module
