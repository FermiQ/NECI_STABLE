[int]
type = integer(kind=int32)
tmp_init = !
tmp_destroy = !
conditional_enable = !defined(SX)

[int64]
type = integer(kind=int64)

[real]
type = real(kind=sp)
conditional_enable = !defined(SX)

[doub]
type = real(kind=dp)

[logical]
type = logical

[cplx]
type = complex(kind=sp)
conditional_enable = !defined(SX)

[cplx_doub]
type = complex(kind=dp)

[sym]
type = type(Symmetry)

[sympairprod]
type = type(SymPairProd)

=========================

module util_mod_cpts
    use constants
    use helem
    use SystemData, only: Symmetry, assignment(=)
    use symdata, only: SymPairProd, assignment(=)
    use iso_c_hack
    implicit none

    private
    public :: swap, arr_2d_ptr, arr_2d_dims, ptr_abuse_1d
    public :: ptr_abuse_scalar, ptr_abuse_2d

contains

    ! Swap the  specified variables
    elemental subroutine swap (a, b)

        ! Sway the element a with the element b via a temporary variable.
        !
        ! InOut: a, b - The elements to swap.

        %(type)s, intent(inout) :: a, b
        %(type)s :: tmp

        %(tmp_init)s(tmp)
        tmp = a
        a = b
        b = tmp
        %(tmp_destroy)s(tmp)
    end subroutine


    function arr_2d_dims(arr) result(dims)

        ! Return the array dimensions of the supplied 2d array

        %(type)s, intent(in) :: arr(:,:)
        integer(int64) :: dims(2)

        dims = [ &
            ubound(arr, 1) - lbound(arr, 1) + 1, &
            ubound(arr, 2) - lbound(arr, 2) + 1 &
        ]

    end function


    function arr_2d_ptr(arr) result(cptr)

        ! Return a cpointer to the specified 2d array

        %(type)s, intent(inout), target :: arr(:,:)
        type(c_ptr) :: cptr

        %(type)s, pointer :: elem1

        ! Convert first to a single element, and then return the c pointer
        ! to keep all compilers happy that the c-interoperability
        ! requirements have been met. Some of them are unecessarily fragile...
        elem1 => arr(lbound(arr, 1), lbound(arr, 2))
        cptr = c_loc(elem1)

    end function

    subroutine ptr_abuse_1d(arr, ptr)

        ! Return an int32 pointer to the target array. Ignore types.

        %(type)s, intent(in), target :: arr(:)
        integer(int32), intent(inout), pointer :: ptr(:)

        type(c_ptr) :: cptr
        %(type)s, pointer :: elem1

        ! Convert first to a single element, then to a c pointer, and then
        ! the target type
        elem1 => arr(lbound(arr, 1))
        cptr = c_loc(elem1)
        call c_f_pointer(cptr, ptr, [1])

    end subroutine

    subroutine ptr_abuse_2d(arr, ptr)

        ! Return an int32 pointer to the target array. Ignore types.

        %(type)s, intent(in), target :: arr(:,:)
        integer(int32), intent(inout), pointer :: ptr(:,:)

        type(c_ptr) :: cptr
        %(type)s, pointer :: elem1

        ! Convert first to a single element, then to a c pointer, and then
        ! the target type
        elem1 => arr(lbound(arr, 1), lbound(arr, 2))
        cptr = c_loc(elem1)
        call c_f_pointer(cptr, ptr, [1,1])

    end subroutine

    subroutine ptr_abuse_scalar(elem, ptr)

        ! Return an int32 pointer to the target array. Ignore types.

        %(type)s, intent(in), target :: elem
        integer(int32), intent(inout), pointer :: ptr

        type(c_ptr) :: cptr

        ! Convert first to a single element, then to a c pointer, and then
        ! the target type
        cptr = c_loc(elem)
        call c_f_pointer(cptr, ptr)

    end subroutine
end module
