#:mute
#:set PRIMITIVE_TYPES = {'real', 'integer', 'logical' , 'complex', 'character'}

#:def get_decl(type, kind, rank, allocatable=False)
$:  _type_fmt(type) + _kindsuffix(kind) + _ranksuffix(rank) + (', allocatable' if allocatable else '')
#:enddef

#:def _type_fmt(type)
$:  type if type in PRIMITIVE_TYPES else 'type({})'.format(type)
#:enddef

#:def _kindsuffix(kind)
$:  '({})'.format(kind) if kind else ''
#:enddef

#:def _ranksuffix(rank)
$:  ', dimension(:{})'.format(', :' * (int(rank) - 1)) if int(rank) else ''
#:enddef

#:def _select(rank, along, var, idx)
$:  var+'('+', '.join(idx if i == int(along) else ':' for i in range(1, int(rank) + 1))+')'
#:enddef

#:def swap(type, kind, rank, a, b, tmp=None)
    ! swap
    block
#:if tmp
        associate(tmp => ${tmp}$)
#:else
            @{get_decl(${type}$, ${kind}$, ${rank}$, ${int(rank) >= 1}$)}@ :: tmp
#:endif
            tmp = ${a}$
            ${a}$ = ${b}$
            ${b}$ = tmp
#:if tmp
        end associate
#:endif
    end block
#:enddef

#:def _comp(comp, a, b)
#:if comp == '<='
  ${a}$ <= ${b}$
#:elif comp == '>='
  ${a}$ >= ${b}$
#:else
  ${comp}$(${a}$, ${b}$)
#:endif
#:enddef

#:def _bubble_sort(type, var, comp='<=', kind=None, rank=1, along=None, tmp=None)
    #:set along = rank if along is None else along
    #:set select = functools.partial(_select, rank, along)
    #:set my_swap = functools.partial(swap, type, kind, int(rank) - 1)
    ! bubblesort
    block
      integer :: n, i
      associate(V => ${var}$)
        do n = ubound(V, ${along}$), lbound(V, ${along}$) + 1, -1
          do i = lbound(V, ${along}$), ubound(V, ${along}$) - 1
            if (.not. @{_comp(${comp}$, ${select('V', 'i')}$, ${select('V', 'i + 1')}$)}@) then
              @{my_swap(${select('V', 'i')}$, ${select('V', 'i + 1')}$, ${tmp}$)}@
            end if
          end do
        end do
      end associate
    end block
#:enddef


#:def merge(type, A, B, C, comp='<=', kind=None, rank=1, along=None)
    #:set along = rank if along is None else along
    #:set select = functools.partial(_select, rank, along)
    ! merge
    block
        integer :: i, j, k

        associate(A => ${A}$, B => ${B}$, C => ${C}$)

          if (size(A) + size(B) > size(C)) then
            error stop
          end if

          i = lbound(A, ${along}$)
          j = lbound(B, ${along}$)
          do k = lbound(C, ${along}$), ubound(C, ${along}$)
            if (i <= ubound(A, ${along}$) .and. j <= ubound(B, ${along}$)) then
              if (@{_comp(${comp}$, ${select('A', 'i')}$, ${select('B', 'j')}$)}@) then
                @{select(C, k)}@ = @{select(A, i)}@
                i = i + 1
              else
                @{select(C, k)}@ = @{select(B, j)}@
                j = j + 1
              end if
            else if (i <= ubound(A, ${along}$)) then
              @{select(C, k)}@ = @{select(A, i)}@
              i = i + 1
            else if (j <= ubound(B, ${along}$)) then
              @{select(C, k)}@ = @{select(B, j)}@
              j = j + 1
            end if
          end do
        end associate
    end block
#:enddef

#:def sort(type, var, comp='<=', kind=None, rank=1, along=None, method='merge_sort')
#:if method == 'merge_sort'
    ${_merge_sort(type, var, comp, kind, rank, along)}$
#:elif method == 'bubble_sort'
    ${_bubble_sort(type, var, comp, kind, rank, along)}$
#:else
    #:stop "Currently only methods 'merge_sort' and 'bubble_sort' supported"
#:endif
#:enddef

#:def _merge_sort(type, var, comp='<=', kind=None, rank=1, along=None)
        #:set along = rank if along is None else along
        #:set select = functools.partial(_select, rank, along)
        #:def shape_like_except_along(rank, along, var, size_along)
        $:  ', '.join(size_along if i == int(along) else 'size({var}, {i})'.format(var=var, i =i) for i in range(1, int(rank) + 1))
        #:enddef

        ! merge_sort
        block
            @{get_decl(${type}$, ${kind}$, ${rank}$, True)}@ :: tmp
            integer :: i, current_size, left, mid, right
            integer, parameter :: along = ${along}$, &
                bubblesort_size = 12

            associate(X => ${var}$)
                ! Determine good number of starting splits
                block
                    integer :: n_splits
                    n_splits = 1
                    do while (size(X, along) / n_splits + merge(0, 1, mod(size(X, along), n_splits) == 0) > bubblesort_size)
                        n_splits = n_splits + 1
                    end do
                    current_size = size(X, along) / n_splits + merge(0, 1, mod(size(X, along), n_splits) == 0)
                end block

                ! Reuse this variable as tmp for swap in bubble_sort
                ! and for merge in merge_sort.
                block
                    integer :: max_buffer_size, n_merges
                    n_merges = ceiling(log(real(size(X, along)) / real(current_size)) / log(2.0))
                    max_buffer_size = current_size * merge(2**(n_merges - 1), 1, n_merges >= 1)
                    allocate(tmp(@{shape_like_except_along(${rank}$, ${along}$, X, max_buffer_size)}@))
                end block

                ! Bubble sort bins of size `bubblesort_size`.
                do left = lbound(X, along), ubound(X, along), current_size
                    right = min(left + bubblesort_size - 1, ubound(X, along))
                    ${_bubble_sort(type, select('X', 'left : right'), comp, kind, rank, along, tmp=select('tmp', '1'))}$
                end do

                do while (current_size < size(X, along))
                    do left = lbound(X, along), ubound(X, along), 2 * current_size
                        right = min(left + 2 * current_size - 1, ubound(X, along))
                        mid = min(left + current_size, right) - 1
                        @{select(tmp, : mid - left + 1)}@ = @{select(X, left : mid)}@
                        ${merge(type, select('tmp', ': mid - left + 1'), select('X', 'mid + 1 : right'), select('X', 'left : right'), comp, kind, rank, along)}$
                    end do
                    current_size = 2 * current_size
                end do
            end associate
        end block
#:enddef
#:endmute
