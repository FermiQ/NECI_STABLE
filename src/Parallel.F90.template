[int]
type1=integer(kind=int32)
mpitype=MPI_INTEGER

[double]
type1=real*8
mpitype=MPI_DOUBLE_PRECISION

[arr_int]
type1=integer(kind=int32), dimension(:)
mpitype=MPI_INTEGER

[arr_double]
type1=real*8, dimension(:)
mpitype=MPI_DOUBLE_PRECISION
===================

module Parallel

Subroutine MPIReduce(Values, iLen, iType, Ret)
   !=  In:
   !=     Values                 real*8.  The corresponding elements for each
   !=                    processor are summed over the processors and returned in 
   !=                    dReturn       
   !=     iLen           Length of the arrays. Must be 1
   !=     iType          an MPI call (e.g. MPI_MAX)
   !=  Out:
   !=     Ret                 real*8 to get the results.
   %(type1)s :: Values(iLen)
   %(type1)s :: Ret(iLen)
   integer iLen
   integer g, ierr,rc,itype
#if PARALLEL
   g=MPI_COMM_WORLD
   call MPI_REDUCE(Values,Ret,iLen,%(mpitype)s,iType,g,ierr)
   if (ierr .ne. MPI_SUCCESS) then
      call Stop_All("MPIReduce",'Error in MPIReduce. Terminating.')
   end if
#else
   Ret=Values
#endif
end Subroutine MPIReduce
Subroutine MPIAllReduce(Values, iLen, iType, Ret)
   !=  In:
   !=     Values                 real*8.  The corresponding elements for each
   !=                    processor are summed over the processors and returned in 
   !=                    dReturn       
   !=     iLen           Length of the arrays. Must be 1
   !=     iType          an MPI call (e.g. MPI_MAX)
   !=  Out:
   !=     Ret                 real*8 to get the results.
   %(type1)s :: Values(iLen)
   %(type1)s :: Ret(iLen)
   integer iLen
   integer g, ierr,rc,itype
#if PARALLEL
   g=MPI_COMM_WORLD
   call MPI_ALLREDUCE(Values,Ret,iLen,%(mpitype)s,iType,g,ierr)
   if (ierr .ne. MPI_SUCCESS) then
      call Stop_All("MPIAllReduce",'Error in MPIAllReduce. Terminating.')
   end if
#else
   Ret=Values
#endif
end Subroutine MPIReduce

Subroutine MPISum(Values, iLen, Ret)
   %(type1)s :: Values(iLen)
   %(type1)s :: Ret(iLen)
   integer iLen
   call MPIReduce(Values,iLen,MPI_SUM,Ret)
end Subroutine MPISum

Subroutine MPISumRoot(Values, iLen, Ret, root)
   !=  In:
   !=     Values(iLen)   Array.  The corresponding elements for each
   !=                    processor are summed and returnd into Ret
   !=     iLen           Length of the arrays.
   !=     root           Processor which to sum the result to.
   !=  Out:
   !=     Return(iLen)   Array  to get the results.
   != The arrays however are declared as scalar values. This is so that we can pass scalar
   != quantities without it getting annoyed with associating a scalar with a vector when we
   != just want to sum single numbers. Since we are parsing by reference, it should mean that
   != arrays are ok too.
   %(type1)s :: Values(iLen)
   %(type1)s :: Ret(iLen)
   integer iLen,i,root
   integer ierr,rc
#ifdef PARALLEL
   call MPI_REDUCE(Values,Ret,iLen,%(mpitype)s,MPI_SUM,root,MPI_COMM_WORLD,ierr)
   if (ierr .ne. MPI_SUCCESS) then
      call Stop_All("MPIDSumRootArr",'Error in MPIDSumRootArr. Terminating.')
   end if
#else
   Re=Values
#endif
end Subroutine MPISumRoot

!A wrapper for the mpi_bcast double precision routine, so it can be used in serial
Subroutine MPIBCast(Values,iLen,Root)
   %(type1)s :: Values(iLen)
    INTEGER :: iLen,Root,error,rc
#ifdef PARALLEL
    CALL MPI_Bcast(Values,iLen,%(mpitype)s,Root,MPI_COMM_WORLD,error)
    if(error.ne.MPI_SUCCESS) then
      call Stop_All("MPIBCast",'Error in MPIBCast. Terminating.')
    endif
#else
#endif
    RETURN
End Subroutine MPIBCast

Subroutine MPIAlltoAllI(SendBuf,SendSize,RecvBuf,RecvSize,ierr)
    INTEGER :: SendBuf(:),RecvBuf(:)
    INTEGER :: SendSize,ierr,RecvSize
#ifdef PARALLEL
    CALL MPI_AlltoAll(SendBuf,SendSize,MPI_INTEGER,RecvBuf,RecvSize,MPI_INTEGER,MPI_COMM_WORLD,ierr)
#else
    RecvBuf=SendBuf
#endif
End Subroutine MPIAlltoAllI


Subroutine MPIBarrier(error)
    INTEGER :: error
#ifdef PARALLEL
    CALL MPI_Barrier(MPI_COMM_WORLD,error)
#endif
End Subroutine MPIBarrier





end module

supermodule Parallel

!=  MPI interface and helper routines for parallel work.
!=  If compiled without the PARALLEL c pre-processing statement, then
!=  contains dummy routines to enable the parallel calculation algorithms to
!=  be used in serial.  This is useful for testing, development and as (in some 
!=  cases) the parallel algorithms are much more efficient that the serial
!=  analogues, as the latter are much more general.

!=  NECI will run as a standalone parallel app or in conjunction with CPMD.
!=  Only standalone is currently implemented.

!=  Parallelization is done over occupied electrons.  These are split among each
!=  processor such that there are an approximately equal number of pairs of
!=  electrons on each processor.
!=
!=  Each processor is given a set of 'Electron 1'.  From this it can generate
!=  a set of single excitations as well as a set of double excitations.  Double
!=  excitations can have any electron past Electron 1 as Electron 2.  This means
!=  that the lower electron numbers will have more possible pairs.
!=
!=  Parallelization is supported by the symmetry excitation generators,
!=  interfaced through GenSymExcitIt3Par There is no clean way to automatically
!=  parallelize high-vertex graph code, so each parallel routine must be
!=  specifically written.
!=
!=  ROUTINES
!=     MPIInit     Setup MPI and init Nodefiles if we're standalone
!=     MPIEnd      Shutdown MPI
!=     MPIStopAll  Abort all processors
!=     MPIISum     Sum an array of integers among all processors, and give the results to the root
!=     MPIISumA    Sum an array of integers among all processors, and distribute the results array to each.
!=     MPIDSum     As MPIISum but for real*8
!=     MPIDSumA    As MPIISumA but for real*8
!=     MPIHelSum   As MPIDSum but for HElement_t

   ! mpi USE is in mixed case to avoid it being picked up by the the Configure
   ! script, as it doesn't require a module file.
#ifdef PARALLEL
   uSE mpi

#endif
   IMPLICIT NONE
   save
   integer iProcIndex,iProcMinE,iProcMaxE
   integer nProcessors
#ifndef PARALLEL
   integer, parameter :: MPI_MIN=0
   integer, parameter :: MPI_MAX=0
   integer, parameter :: MPI_SUM=0
   integer, parameter :: MPI_MAXLOC=0
   integer, parameter :: MPI_MAX_ERROR_STRING=255
#endif

Contains



Subroutine MPIInit(tExternal)
   != Determine the number of processors, and fork each off to its own NodeFile output file
   !=
   != In:
   !=   tExternal True if using VASP/CPMD's MPI interface, so we don't have to initialise our own.
   implicit none
   logical, intent(in) :: tExternal
   integer numtasks, rank, ierr, rc
   integer a,b,g
   character*20 NodeFile
   logical :: Local_IO,flag
   logical, save :: initialised=.false.
#if PARALLEL
   integer(Kind=MPI_ADDRESS_KIND) :: res

   if (.not.initialised) then

       if(tExternal) then
         write(6,*) 'Using CPMD MPI configuration'
       else 
         write(6,*) 'Initing MPI'

         call MPI_INIT(ierr)
         if (ierr .ne. MPI_SUCCESS) then
            call Stop_All("MPIInit",'Error starting MPI program. Terminating.')
         end if
       endif
       call MPI_COMM_RANK(MPI_COMM_WORLD, iProcIndex, ierr)
       call MPI_COMM_SIZE(MPI_COMM_WORLD, nProcessors, ierr)
       WRITE(6,*) "Number of processors: ",nProcessors

       if(tExternal) then
          write(6,*) "NECI Processor ",iProcIndex+1,'/',nProcessors
       else
!Test if I/O is allowed on all processors - get res, the attribute attached to the communicator concerning I/O
!This does not seem to work...
!      CALL MPI_Comm_get_attr(MPI_COMM_SELF,MPI_IO,res,flag,ierr)
!flag will say if can do I/O
!      Local_IO=(ierr.eq.MPI_SUCCESS.and.flag.and.res.ne.MPI_PROC_NULL)
!      IF(.not.Local_IO) THEN
!          WRITE(6,*) ierr,Local_IO,flag,res
!          CALL Stop_All('MPIInit',"IO not possible on this processor")
!      ELSE
!          WRITE(6,*) "IO possible on this processor"
!          CALL FLUSH(6)
!      ENDIF

          if(iProcIndex.eq.0) then
             write(6,*) "Processor ",iProcIndex+1,'/',nProcessors, ' as head node.'
          else

             write(6,*) "Processor ",iProcIndex+1,'/',nProcessors, ' moving to local output.'
             if (iProcIndex.lt.9) then
                 write (NodeFile,'(a,i1)') 'NodeFile',iProcIndex+1
             elseif(iProcIndex.lt.99) then
                 write (NodeFile,'(a,i2)') 'NodeFile',iProcIndex+1
             elseif(iProcIndex.lt.999) then
                 write (NodeFile,'(a,i3)') 'NodeFile',iProcIndex+1
             else
                 write (NodeFile,'(a,i4)') 'NodeFile',iProcIndex+1
             end if
             write(6,*) "outfile=",NodeFile
             close(6,status="keep")
             open(6,file=NodeFile)
             write(6,*) "Processor ",iProcIndex+1,'/',nProcessors, ' on local output.'
          endif
          call GetProcElectrons(iProcIndex,iProcMinE,iProcMaxE) 
!  Just synchronize everything briefly
          a=iProcIndex+1
          call MPIISum(a,1,g)
          WRITE(6,*) "Sum: ",g
       endif

       initialised=.true.
       call MPI_ERRHANDLER_SET(MPI_COMM_WORLD,MPI_ERRORS_RETURN)
   end if

#else 

   ! Dummy set up for serial work.
   iProcIndex=0
   nProcessors=1
#endif

   RETURN
   
end Subroutine MPIInit



Subroutine MPIEnd(tExternal)
   !=  Shutdown our MPI Interface if we're not using CPMD/VASP's
   !=
   != In:
   !=   tExternal Set if using an external program's MPI interface
   !=             (currently CPMD or VASP), in which case the external
   !=             program handles MPI termination.
   implicit none
   logical tExternal
   integer ierr
#if PARALLEL
   if(.not.tExternal) then
      call MPI_FINALIZE(ierr)
   endif
#endif
end subroutine MPIEnd



Subroutine MPIStopAll(error_str)
   !=  Abort all processors.
   !=  
   !=  In:
   !=     error_str: parameter string containing error used as argument to STOP.
   character(3) :: error_str
   integer error_code,ierror
#if PARALLEL
   ! errorcode: Error returned to invoking environment.
   ! ierror: error status (of abort: was abort successful?)
   ! Currently neither are analysed.
   call MPI_ABORT(MPI_COMM_WORLD, error_code, ierror)
   WRITE(6,*) error_str
   CALL FLUSH(6)
   stop
#endif
end subroutine MPIStopAll

Subroutine GetProcElectrons(iProcIndex,iMinElec,iMaxElec)
   !=  Choose min and max electrons such that ordered pairs are distributed evenly across processors
   !=
   !=  In:
   !=     iProcIndex  Index of this processor (starting at 1).
   !=  Out:
   !=     iMinElec    First electron to allocate to this processor.
   !=     iMaxElec    Last electron to allocate to this processor.
   use SystemData, only: nEl
   implicit none
   integer iProcIndex,iMinElec,iMaxElec
   real*8 nCur
#ifdef PARALLEL
!Invert X=n(n-1)/2
   nCur=((nProcessors+1-iProcIndex)*nEl*(nEl-1.d0)/nProcessors)

   nCur=nEl+1-(1+sqrt(1.d0+4*nCur))/2
 !Hitting smack bang on an integer causes problems
   if(ceiling(nCur).eq.floor(nCur)) nCur=nCur-1e-6
   iMinElec=ceiling(nCur)
   if(iProcIndex.eq.1) iMinElec=1
   nCur=((nProcessors-iProcIndex)*nEl*(nEl-1.d0)/nProcessors)
   nCur=nEl+1-(1+sqrt(1.d0+4*nCur))/2
 !Hitting smack bang on an integer causes problems
   if(ceiling(nCur).eq.floor(nCur)) nCur=nCur-1e-6
   iMaxElec=floor(nCur)
   if(iProcIndex.eq.nProcessors) iMaxElec=nEl
#else
   ! Serial calculation: all electrons on one processor.
   iMinElec=1
   iMaxElec=nEl
#endif
End subroutine GetProcElectrons

end supermodule
