[int]
type1=integer(kind=int32)
mpitype=MPI_INTEGER
mpilen=1
mpilen2=1
ndim=0

[arr_int]
type1=integer(kind=int32), dimension(:)
mpilen=(ubound(values,1)-lbound(values,1)+1)
mpilen2=(ubound(values2,1)-lbound(values2,1)+1)
ndim=1

[arr2_int]
type1=integer(kind=int32), dimension(:,:)
mpilen=((ubound(values,1)-lbound(values,1)+1)*(ubound(values,2)-lbound(values,2)+1))
mpilen2=((ubound(values2,1)-lbound(values2,1)+1)*(ubound(values2,2)-lbound(values2,2)+1))
ndim=2

[int64]
type1=integer(kind=int64)
mpitype=MPI_INTEGER8
mpilen=1
mpilen2=1
ndim=0

[arr_int64]
type1=integer(kind=int64), dimension(:)
mpilen=(ubound(values,1)-lbound(values,1)+1)
mpilen2=(ubound(values2,1)-lbound(values2,1)+1)
ndim=1

[arr2_int64]
type1=integer(kind=int64), dimension(:,:)
mpilen=((ubound(values,1)-lbound(values,1)+1)*(ubound(values,2)-lbound(values,2)+1))
mpilen2=((ubound(values2,1)-lbound(values2,1)+1)*(ubound(values2,2)-lbound(values2,2)+1))
ndim=2


[double]
type1=real*8
mpitype=MPI_DOUBLE_PRECISION
mpilen=1
mpilen2=1
ndim=0

[arr_double]
type1=real*8, dimension(:)
mpilen=(ubound(values,1)-lbound(values,1)+1)
mpilen2=(ubound(values2,1)-lbound(values2,1)+1)
ndim=1

[arr2_double]
type1=real*8, dimension(:,:)
mpilen=((ubound(values,1)-lbound(values,1)+1)*(ubound(values,2)-lbound(values,2)+1))
mpilen2=((ubound(values2,1)-lbound(values2,1)+1)*(ubound(values2,2)-lbound(values2,2)+1))
ndim=2

[arr3_double]
type1=real*8, dimension(:,:,:)
mpilen=((ubound(values,1)-lbound(values,1)+1)*(ubound(values,2)-lbound(values,2)+1)*(ubound(values,3)-lbound(values,3)+1))
mpilen2=((ubound(values2,1)-lbound(values2,1)+1)*(ubound(values2,2)-lbound(values2,2)+1)*(ubound(values2,3)-lbound(values2,3)+1))
ndim=3

[logical]
type1=LOGICAL
mpitype=MPI_LOGICAL
mpilen=1
mpilen2=1
ndim=0

[arr_int]
type1=integer(kind=int32), dimension(:)
mpitype=MPI_INTEGER
mpilen=(ubound(values,1)-lbound(values,1)+1)
mpilen2=(ubound(values2,1)-lbound(values2,1)+1)
ndim=1

[arr2_int]
type1=integer(kind=int32), dimension(:,:)
mpitype=MPI_INTEGER
mpilen=((ubound(values,1)-lbound(values,1)+1)*(ubound(values,2)-lbound(values,2)+1))
mpilen2=((ubound(values2,1)-lbound(values2,1)+1)*(ubound(values2,2)-lbound(values2,2)+1))
ndim=2

[arr_int64]
type1=integer(kind=int64), dimension(:)
mpitype=MPI_INTEGER8
mpilen=(ubound(values,1)-lbound(values,1)+1)
mpilen2=(ubound(values2,1)-lbound(values2,1)+1)
ndim=1

[arr_logical]
type1=logical, dimension(:)
mpitype=MPI_LOGICAL
mpilen=(ubound(values,1)-lbound(values,1)+1)
mpilen2=(ubound(values2,1)-lbound(values2,1)+1)
ndim=1

[arr3_double]
type1=real*8, dimension(:,:,:)
mpitype=MPI_DOUBLE_PRECISION
mpilen=((ubound(values,1)-lbound(values,1)+1)*(ubound(values,2)-lbound(values,2)+1)*(ubound(values,3)-lbound(values,3)+1))
mpilen2=((ubound(values2,1)-lbound(values2,1)+1)*(ubound(values2,2)-lbound(values2,2)+1)*(ubound(values2,3)-lbound(values2,3)+1))
ndim=3

[arr2_double]
type1=real*8, dimension(:,:)
mpitype=MPI_DOUBLE_PRECISION
mpilen=((ubound(values,1)-lbound(values,1)+1)*(ubound(values,2)-lbound(values,2)+1))
mpilen2=((ubound(values2,1)-lbound(values2,1)+1)*(ubound(values2,2)-lbound(values2,2)+1))
ndim=2

[arr_double]
type1=real*8, dimension(:)
mpitype=MPI_DOUBLE_PRECISION
mpilen=(ubound(values,1)-lbound(values,1)+1)
mpilen2=(ubound(values2,1)-lbound(values2,1)+1)
ndim=1

[complex]
type1=complex*16
mpitype=MPI_DOUBLE_COMPLEX
mpilen=1
mpilen2=1
ndim=0

[arr_complex]
type1=complex*16, dimension(:)
mpilen=(ubound(values,1)-lbound(values,1)+1)
mpilen2=(ubound(values2,1)-lbound(values2,1)+1)
ndim=1

[arr2_complex]
type1=complex*16, dimension(:,:)
mpilen=((ubound(values,1)-lbound(values,1)+1)*(ubound(values,2)-lbound(values,2)+1))
mpilen2=((ubound(values2,1)-lbound(values2,1)+1)*(ubound(values2,2)-lbound(values2,2)+1))
ndim=2

[arr3_complex]
type1=complex*16, dimension(:,:,:)
mpilen=((ubound(values,1)-lbound(values,1)+1)*(ubound(values,2)-lbound(values,2)+1)*(ubound(values,3)-lbound(values,3)+1))
mpilen2=((ubound(values2,1)-lbound(values2,1)+1)*(ubound(values2,2)-lbound(values2,2)+1)*(ubound(values2,3)-lbound(values2,3)+1))
ndim=3

=========================

!For a full header, see the supermodule at the end of the file.


   ! mpi USE is in mixed case to avoid it being picked up by the the Configure
   ! script, as it doesn't require a module file.
module Parallel
#ifdef PARALLEL
   uSe MPI
#endif
   use ParallelHelper,  only: CommI, GetComm
   use constants
   implicit none


#ifndef PARALLEL
! These don't exist in serial, so fudge them
   integer, private, parameter :: MPI_MIN=0
   integer, private, parameter :: MPI_MAX=0
   integer, private, parameter :: MPI_SUM=0
   integer, private, parameter :: MPI_MAXLOC=0
   integer, private, parameter :: MPI_MAX_ERROR_STRING=255
#endif


    interface MPIReduce
        module procedure MPIReduce_len_%(name)s
        module procedure MPIReduce_auto_%(name)s
    end interface

    interface MPIBcast
        module procedure MPIBcast_lenroot_%(name)s
        module procedure MPIBcast_len_%(name)s
        module procedure MPIBcast_auto_%(name)s
    end interface

    interface MPISumAll
        module procedure MPISumAll_len_%(name)s
        module procedure MPISumAll_auto_%(name)s
    end interface

    interface MPIAllReduce
        module procedure MPIAllReduce_len_%(name)s
        module procedure MPIAllReduce_auto_%(name)s
    end interface

    interface MPIScatter
        module procedure MPIScatter_len_%(name)s
        module procedure MPIScatter_auto_%(name)s
    end interface

    interface MPIAllGather
        module procedure MPIAllGather_len_%(name)s
        module procedure MPIAllGather_auto_%(name)s
    end interface

    interface MPIGather
        module procedure MPIGather_len_%(name)s
        module procedure MPIGather_auto_%(name)s
    end interface

    interface MPIGatherV
        module procedure MPIGatherV_len_%(name)s
        module procedure MPIGatherV_len2_%(name)s
        module procedure MPIGatherV_auto_%(name)s
        module procedure MPIGatherV_auto2_%(name)s
    end interface

    interface MPIScatterV
        module procedure MPIScatterV_len_%(name)s
        module procedure MPIScatterV_len2_%(name)s
    end interface

contains

subroutine MPIReduce_len (Values, iLen, iType, Ret, Node)

    ! Call MPI_REDUCE of type iType on the elements values --> ret. The
    ! number of elements to transmit is specified by iLen.
    !
    ! In:  Values - The elements to be reduced over the processors.
    !      iLen   - The length of the data (in elements of its type)
    !      iType  - MPI specification (e.g. MPI_MAX)
    ! Out: Ret    - The reduced elements are returned in this array
    !               *** ON ROOT ONLY ***
    %(type1)s, intent(in)  :: Values()
    %(type1)s, intent(out) :: Ret()
    integer, intent(in) :: iLen, iType
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
    integer ierr
#if PARALLEL
    call GetComm(Comm,Node,rt)
    call MPI_REDUCE (Values, Ret, iLen, %(mpitype)s, iType, rt, &
                     Comm, ierr)
    if (ierr .ne. MPI_SUCCESS) then
        call Stop_All("MPIReduce", 'Error in MPI_REDUCE. Terminating.')
    end if
#else
    Ret=Values
#endif
end subroutine

subroutine MPIReduce_auto (Values, iType, Ret, Node)

    ! The same as MPIReduce_len, without the iLen specification. The number
    ! of elements is determined automatically.

    %(type1)s, intent(in)  :: Values()
    %(type1)s, intent(out) :: Ret()
    integer, intent(in) :: iType
    integer ierr
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
    call MPI_REDUCE (Values, Ret, %(mpilen)s, %(mpitype)s, iType, rt, &
                     Comm, ierr)
    if (ierr .ne. MPI_SUCCESS) then
        call Stop_All("MPIReduce", 'Error in MPI_REDUCE. Terminating.')
    end if
#else
    Ret=Values
#endif
end subroutine

subroutine MPIAllReduce_len (Values, iLen, iType, Ret, Node)

    ! Call MPI_REDUCE with the type iType on the array Values (with length
    ! iLen) outputting the results on ALL processors in the array Ret.
    !
    ! In:  Values - Data to reduce
    !      iLen   - Number of elements in Values and Ret
    !      iType  - Reduction operation to perform
    ! Out: Ret    - Reduced data

    %(type1)s, intent(in) :: Values()
    %(type1)s, intent(out) :: Ret()
    integer, intent(in) :: iLen, iType
    integer :: ierr
    type(CommI), intent(in),optional :: Node
    integer Comm
#if PARALLEL
    call GetComm(Comm,Node)

    call MPI_ALLREDUCE (Values, Ret, iLen, %(mpitype)s, iType, &
                        Comm, ierr)
    if (ierr /= MPI_SUCCESS) then
        call stop_all ("MPIAllReduce", 'Error in MPI_ALLREDUCE. Terminating.')
    endif
#else
    Ret = Values
#endif
end subroutine

subroutine MPIAllReduce_auto (Values, iType, Ret, Node)

    ! The same as MPIAllReduce_len, but the length of array Value (and thus
    ! Ret) is determinend automagically

    %(type1)s, intent(in) :: Values()
    %(type1)s, intent(out) :: Ret()
    integer, intent(in) :: iType
    integer :: ierr
    type(CommI), intent(in),optional :: Node
    integer Comm
#if PARALLEL
    call GetComm(Comm,Node)
    call MPI_ALLREDUCE (Values, Ret, %(mpilen)s, %(mpitype)s, iType, &
                        Comm, ierr)
    if (ierr /= MPI_SUCCESS) then
        call stop_all ("MPIAllReduce", 'Error in MPI_ALLREDUCE. Terminating.')
    endif
#else
    Ret = Values
#endif
end subroutine

Subroutine MPIAllReduceDatatype(Values, iLen, iType, iDatatype, Ret, Node)
   !=  In:
   !=     Values         The corresponding elements for each
   !=                    processor are reduced over the processors and returned in 
   !=                    Ret on all processors
   !=     iLen           Length of the data (in elements of its type)
   !=     iType          an MPI call (e.g. MPI_MAX)
   !=     iDatatype      a custom data type to pass to MPI (e.g. MPI_2INTEGER)
   !=  Out:
   !=     Ret            data store to get the results.
   %(type1)s, intent(in)  :: Values()
   %(type1)s, intent(out) :: Ret()
   integer, intent(in) :: iLen, iDatatype
   integer g, ierr, itype
   type(CommI), intent(in),optional :: Node
   integer Comm
#if PARALLEL
   call GetComm(Comm,Node)
!   write(6,*) "AllReduceDatatype %(type1)s",iLen,iType
   call MPI_ALLREDUCE(Values,Ret,iLen,iDatatype,iType,Comm,ierr)
   if (ierr .ne. MPI_SUCCESS) then
      call Stop_All("MPIAllReduceDatatype",'Error in MPIAllReduce. Terminating.')
   end if
#else
   Ret=Values
#endif
end subroutine

subroutine MPISumAll_len (Values, iLen, Ret, Node)

    ! Sum data on different processors, leaving the result in Ret on all 
    ! of the processors
    !
    ! In:  Values   - Array of data to contribute to the sum
    !      iLen     - Number of data elements in Values
    ! Out: Ret      - An array of the same size as values to contain the 
    !                 summed values

    %(type1)s, intent(in) :: Values()
    %(type1)s, intent(out) :: Ret()
    integer, intent(in) :: iLen
    type(CommI), intent(in),optional :: Node

    call MPIAllReduce (Values, iLen, MPI_SUM, Ret, Node)

end subroutine

subroutine MPISumAll_auto (Values, Ret, Node)

    ! The same as MPISum_auto, but the length of Values is determined
    ! automagically

    %(type1)s, intent(in) :: Values()
    %(type1)s, intent(out) :: Ret()
    type(CommI), intent(in),optional :: Node

    call MPIAllReduce (Values, MPI_SUM, Ret, Node)

end subroutine

Subroutine MPISum(Values, iLen, Ret, Node)
   !=  Sum data among all processors, and give the results to the root 
   !=  In:
   !=     Values(iLen)   Data (array possibly)  The corresponding elements for each
   !=                    processor are summed and returnd into Ret
   !=     iLen           Length of the data (in elements of its type)
   !=  Out:
   !=     Return(iLen)   Variable (array possibly) to get the results.
   %(type1)s, intent(in)  :: Values()
   %(type1)s, intent(out) :: Ret()
   integer, intent(in) :: iLen
   integer ierr
   type(CommI), intent(in),optional :: Node
   integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
   call MPI_REDUCE(Values,Ret,iLen,%(mpitype)s,MPI_SUM,rt,Comm,ierr)
   if (ierr .ne. MPI_SUCCESS) then
      call Stop_All("MPISum",'Error in MPISum. Terminating.')
   end if
#else
   Ret=Values
#endif
end subroutine

subroutine MPIBCast_lenroot (Values, iLen, rt)

    ! Call MPI_BCAST to broadcast the value(s) in array Values on processor
    ! Root to all processors, where the number of elements in array Values is
    ! specified by iLen.
    !
    ! In:    iLen   - The number of elements in Values
    ! InOut: Values - The data to broadcast, and the returned values
    use ParallelHelper, only: CommGlobal
    %(type1)s, intent(inout) :: Values()
    integer, intent(in) :: iLen,rt
    integer :: error
#if PARALLEL
    call MPI_BCAST (Values, iLen, %(mpitype)s, rt, CommGlobal, error)
    if (error /= MPI_SUCCESS) then
        call stop_all("MPIBCast", 'Error in MPI_BCAST. Terminating.')
    endif
#endif
end subroutine
subroutine MPIBCast_len (Values, iLen, Node)

    ! Call MPI_BCAST to broadcast the value(s) in array Values on processor
    ! Root to all processors, where the number of elements in array Values is
    ! specified by iLen.
    !
    ! In:    iLen   - The number of elements in Values
    ! InOut: Values - The data to broadcast, and the returned values

    %(type1)s, intent(inout) :: Values()
    integer, intent(in) :: iLen
    integer :: error
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
    call MPI_BCAST (Values, iLen, %(mpitype)s, rt, Comm, error)
    if (error /= MPI_SUCCESS) then
        call stop_all("MPIBCast", 'Error in MPI_BCAST. Terminating.')
    endif
#endif
end subroutine

subroutine MPIBCast_auto (Values, Node)

    ! The same as MPIBcast_len, but the number of elements in values is 
    ! determined automagically
    !
    ! In:    Root   - The processor to broadcast from
    ! InOut: Values - The data to broadcast, and the returned values

    %(type1)s, intent(inout) :: Values()
    integer :: error
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
    call MPI_BCAST (Values, %(mpilen)s, %(mpitype)s, rt, Comm, &
                    error)
    if (error /= MPI_SUCCESS) then
        call stop_all("MPIBCast", 'Error in MPI_BCAST. Terminating.')
    endif
#endif
end subroutine

Subroutine MPIAlltoAll(SendBuf,SendSize,RecvBuf,RecvSize,ierr, Node)
    INTEGER,intent(in) :: SendSize,RecvSize
    INTEGER, intent(out) :: ierr
    %(type1)s, intent(in) :: SendBuf(:)
    %(type1)s, intent(inout):: RecvBuf(:)
    type(CommI), intent(in),optional :: Node
    integer Comm
#if PARALLEL
    call GetComm(Comm,Node)
    CALL MPI_AlltoAll(SendBuf,SendSize,%(mpitype)s,RecvBuf,RecvSize,%(mpitype)s,Comm,ierr)
#else
    RecvBuf=SendBuf
    ierr=0
#endif
end subroutine

Subroutine MPIAlltoAllV(SendBuf,SendSizes,SendOffsets,RecvBuf,RecvSizes,RecvOffsets,ierr,Node)
    INTEGER,intent(in) :: SendSizes(:),SendOffsets(:),RecvSizes(:),RecvOffsets(:)
    INTEGER, intent(out) :: ierr
    %(type1)s, intent(in) :: SendBuf(:)
    %(type1)s, intent(inout):: RecvBuf(:)
!    write(6,*) "AllToAllV %(type1)s",SendSizes,SendOffSets,RecvSizes,RecvOffsets
!    write(6,*) "AllToAllV %(type1)s",shape(SendBuf),shape(RecvBuf)
    type(CommI), intent(in),optional :: Node
    integer Comm
#if PARALLEL
    call GetComm(Comm,Node)
    CALL MPI_AlltoAllV(SendBuf,SendSizes,SendOffsets,%(mpitype)s,RecvBuf,RecvSizes,RecvOffsets,%(mpitype)s,Comm,ierr)
#else
    RecvBuf=SendBuf
    ierr=0
#endif
end subroutine

Subroutine MPIAllGather_len(SendBuf,SendSize,RecvBuf,RecvSize,ierr,Node)
    INTEGER,intent(in) :: SendSize,RecvSize
    INTEGER, intent(out) :: ierr
    %(type1)s,intent(in) :: SendBuf()
    %(type1)s,intent(inout) :: RecvBuf(:)
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node)
    CALL MPI_AllGather(SendBuf,SendSize,%(mpitype)s,RecvBuf,RecvSize,%(mpitype)s,Comm,ierr)
#else
    RecvBuf(1)=SendBuf
    ierr=0
#endif
end subroutine

! Values is the Send Buffer
! Values2 is the Receive Buffer
Subroutine MPIAllGather_auto(Values,Values2,ierr,Node)
    INTEGER, intent(out) :: ierr
    %(type1)s,intent(in) :: Values()
    %(type1)s,intent(inout) :: Values2(:)
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
    CALL MPI_AllGather(Values,%(mpilen)s,&
      %(mpitype)s,Values2,%(mpilen2)s,&
      %(mpitype)s,Comm,ierr)
#else
    Values2(1)=Values
    ierr=0
#endif
end subroutine

Subroutine MPIGather_len(SendBuf,SendSize,RecvBuf,RecvSize,ierr,Node)
    INTEGER,intent(in) :: SendSize,RecvSize
    INTEGER, intent(out) :: ierr
    %(type1)s,intent(in) :: SendBuf()
    %(type1)s,intent(inout) :: RecvBuf(:)
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
    CALL MPI_Gather(SendBuf,SendSize,%(mpitype)s,RecvBuf,RecvSize,%(mpitype)s,rt,Comm,ierr)
#else
    RecvBuf(1)=SendBuf
    ierr=0
#endif
end subroutine

! Values is the Send Buffer
! Values2 is the Receive Buffer
Subroutine MPIGather_auto(Values,Values2,ierr,Node)
    INTEGER, intent(out) :: ierr
    %(type1)s,intent(in) :: Values()
    %(type1)s,intent(inout) :: Values2(:)
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
    CALL MPI_Gather(Values,%(mpilen)s,&
      %(mpitype)s,Values2,%(mpilen2)s,&
      %(mpitype)s,rt,COMM,ierr)
#else
    Values2(1)=Values
    ierr=0
#endif
end subroutine

!Gather from many processors to the root.
! Each Processor has data in SendBuf() with length SendSize.
! The root knows the lengths of the data from each proc, and they are placed on the root into RecvBuf at displacements Disps.
Subroutine MPIGatherV_len(SendBuf,SendSize,RecvBuf,Lengths,Disps,ierr,Node)
    INTEGER,intent(in) :: SendSize,Lengths(:),Disps(:)
    INTEGER, intent(out) :: ierr
    %(type1)s,intent(in) :: SendBuf()
    %(type1)s,intent(inout) :: RecvBuf(:)
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
    CALL MPI_GatherV(SendBuf,SendSize,%(mpitype)s,RecvBuf,Lengths,Disps,%(mpitype)s,rt,COMM,ierr)
#else
    RecvBuf(1)=SendBuf()
    ierr=0
#endif
end subroutine

! This gathers an array into another array with the same number of dims.
Subroutine MPIGatherV_len2(SendBuf,SendSize,RecvBuf,Lengths,Disps,ierr,Node)
    INTEGER,intent(in) :: SendSize,Lengths(:),Disps(:)
    INTEGER, intent(out) :: ierr
    %(type1)s,intent(in) :: SendBuf(:)
    %(type1)s,intent(inout) :: RecvBuf(:)
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
    CALL MPI_GatherV(SendBuf,SendSize,%(mpitype)s,RecvBuf,Lengths,Disps,%(mpitype)s,rt,COMM,ierr)
#else
!    write(6,*) lbound(RecvBuf),ubound(RecvBuf),lbound(SendBuf),ubound(SendBuf)
    RecvBuf(lbound(RecvBuf,%(ndim)s+1):(lbound(RecvBuf,%(ndim)s+1)+size(SendBuf,%(ndim)s+1)-1))=SendBuf(:)
    ierr=0
#endif
end subroutine

! Values is the Send Buffer
! Values2 is the Receive Buffer
Subroutine MPIGatherV_auto(Values,Values2,Lengths,Disps,ierr,Node)
    INTEGER, intent(out) :: ierr
    INTEGER, intent(in) :: Disps(:),Lengths(:)
    %(type1)s,intent(in) :: Values()
    %(type1)s,intent(inout) :: Values2(:)
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
    CALL MPI_GatherV(Values,%(mpilen)s,&
      %(mpitype)s,Values2,Lengths,&
      Disps,%(mpitype)s,rt,COMM,ierr)
#else
    Values2(1)=Values
    ierr=0
#endif
end subroutine

! This gathers an array into another array with the same number of dims.
! Values is the Send Buffer
! Values2 is the Receive Buffer
Subroutine MPIGatherV_auto2(Values,Values2,Lengths,Disps,ierr,Node)
    INTEGER, intent(out) :: ierr
    INTEGER, intent(in) :: Disps(:),Lengths(:)
    %(type1)s,intent(in) :: Values(:)
    %(type1)s,intent(inout) :: Values2(:)
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
    CALL MPI_GatherV(Values,%(mpilen)s,&
      %(mpitype)s,Values2,Lengths,&
      Disps,%(mpitype)s,rt,COMM,ierr)
#else
    Values2(Disps(1):Disps(1)+Lengths(1))=Values(:)
    ierr=0
#endif
end subroutine

!From SendBuff send to all processors
Subroutine MPIScatterV_len(SendBuf,SendSizes,Disps,RecvBuf,Length,ierr,Node)
    INTEGER,intent(in) :: SendSizes(:),Length,Disps(:)
    INTEGER, intent(out) :: ierr
    %(type1)s,intent(in) :: SendBuf()
    %(type1)s,intent(inout) :: RecvBuf(:)
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
!    write(6,*) "AllToAll %(type1)s",SendSize,RecvSize
    CALL MPI_ScatterV(SendBuf,SendSizes,Disps,%(mpitype)s,RecvBuf,Length,%(mpitype)s,rt,COMM,ierr)
#else
    RecvBuf(1)=SendBuf()
    ierr=0
#endif
end subroutine

! This scatters an array into another array with the same number of dims. SendSizes are the lengths to send to each proc
!  and Disps are the displacements of the data in SendBuf.  Each processor should know its own Length
Subroutine MPIScatterV_len2(SendBuf,SendSizes,Disps,RecvBuf,Length,ierr,Node)
    INTEGER,intent(in) :: SendSizes(:),Length,Disps(:)
    INTEGER, intent(out) :: ierr
    %(type1)s,intent(in) :: SendBuf(:)
    %(type1)s,intent(inout) :: RecvBuf(:)
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
!    write(6,*) "AllToAll %(type1)s",SendSize,RecvSize
    CALL MPI_ScatterV(SendBuf,SendSizes,Disps,%(mpitype)s,RecvBuf,Length,%(mpitype)s,rt,COMM,ierr)
#else
!    write(6,*) lbound(RecvBuf),ubound(RecvBuf),lbound(SendBuf),ubound(SendBuf)
    RecvBuf(:)=SendBuf(lbound(SendBuf,%(ndim)s+1):(lbound(SendBuf,%(ndim)s+1)+Length-1))
    ierr=0
#endif
end subroutine


Subroutine MPIScatter_len(SendBuf,SendSize,RecvBuf,RecvSize,ierr,Node)
    INTEGER, intent(in)  :: SendSize,RecvSize
    INTEGER, intent(out) :: ierr
    %(type1)s, intent(in) :: SendBuf(:)
    %(type1)s, intent(inout) :: RecvBuf()
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
    CALL MPI_Scatter(SendBuf,SendSize,%(mpitype)s,RecvBuf,RecvSize,%(mpitype)s,rt,COMM,ierr)
#else
    RecvBuf=SendBuf(1)
    ierr=0
#endif
end subroutine

! Values is the Send Buffer
! Values2 is the Receive Buffer
Subroutine MPIScatter_auto(Values,Values2,ierr,Node)
    INTEGER, intent(out) :: ierr
    %(type1)s, intent(in) :: Values(:)
    %(type1)s, intent(inout) :: Values2()
    type(CommI), intent(in),optional :: Node
    integer Comm,rt
#if PARALLEL
    call GetComm(Comm,Node,rt)
    CALL MPI_Scatter(Values,%(mpilen2)s,&
      %(mpitype)s,Values2,%(mpilen2)s,&
      %(mpitype)s,rt,COMM,ierr)
#else
    Values2=Values(1)
    ierr=0
#endif
end subroutine

subroutine MPIRecv(Buffer,BuffSize,Source,Tag,ierr)
    INTEGER, intent(in)  :: BuffSize,Source,Tag
    INTEGER, intent(out) :: ierr
    %(type1)s, intent(out) :: Buffer(:)
#ifdef PARALLEL
    INTEGER :: Stat(MPI_STATUS_SIZE)
    CALL MPI_Recv(Buffer,BuffSize,%(mpitype)s,Source,Tag,MPI_COMM_WORLD,Stat,ierr)
#else
    ierr=0
    Buffer(1)=Buffer(1)
#endif
end subroutine

subroutine MPISend(Buffer,BuffSize,Dest,Tag,ierr)
    INTEGER, intent(in)  :: BuffSize,Dest,Tag
    INTEGER, intent(out) :: ierr
    %(type1)s, intent(in) :: Buffer(:)
#ifdef PARALLEL
    CALL MPI_Send(Buffer,BuffSize,%(mpitype)s,Dest,Tag,MPI_COMM_WORLD,ierr)
#else
    ierr=0
#endif
end subroutine

end module

supermodule Parallel

!=  MPI interface and helper routines for parallel work.
!=  If compiled without the PARALLEL c pre-processing statement, then
!=  contains dummy routines to enable the parallel calculation algorithms to
!=  be used in serial.  This is useful for testing, development and as (in some 
!=  cases) the parallel algorithms are much more efficient that the serial
!=  analogues, as the latter are much more general.

!=  NECI will run as a standalone parallel app or in conjunction with CPMD.
!=  Only standalone is currently implemented.

!=  For some jobs,
!=  Parallelization is done over occupied electrons.  These are split among each
!=  processor such that there are an approximately equal number of pairs of
!=  electrons on each processor.
!=
!=  Each processor is given a set of 'Electron 1'.  From this it can generate
!=  a set of single excitations as well as a set of double excitations.  Double
!=  excitations can have any electron past Electron 1 as Electron 2.  This means
!=  that the lower electron numbers will have more possible pairs.
!=
!=  Parallelization is supported by the symmetry excitation generators,
!=  interfaced through GenSymExcitIt3Par There is no clean way to automatically
!=  parallelize high-vertex graph code, so each parallel routine must be
!=  specifically written.

!=  FCIMC is parallelized over determinants, using a hashing routine.  This is not dealt with here

!=  It is highly advised that the following routines are used in parallel work, as they exist both in
!=  serial and parallel compiles and aid interoperability.  The extra overhead is likely minimal compared
!=  to the communication time.

!=
!=  MPI ROUTINES
!=     MPIInit     Setup MPI and init Nodefiles if we're standalone
!=     MPIEnd      Shutdown MPI
!=     MPIStopAll  Abort all processors
!=     MPIBarrier  Wait until all processors have synched.

!   These routines exist for all types specified in the header. (Ah the beauty of templates!)
!=     MPISum      Sum data among all processors, and give the results to all
!=     MPISumRoot  Sum data among all processors, and give the results to the root
!=     MPIBCast    Send from processor Root to all other processors
!=     MPIAllReduceDatatype Like MPIAllReduce, but allows a custom datatype (like MPI_2INTEGER) to be specified
!=     MPIAllGather Gathers data from all tasks and sends it to all.
!=     MPIRecv     Receive data from a single node

!=

!=  OTHER ROUTINES
!=     GetProcElectrons


   ! mpi USE is in mixed case to avoid it being picked up by the the Configure
   ! script, as it doesn't require a module file.
#ifdef PARALLEL
   uSE mpi

#endif
   use ParallelHelper
   IMPLICIT NONE
   interface
        subroutine gethostname(nm, sz) bind(c)
            use, intrinsic :: iso_c_binding
            implicit none
            integer(c_size_t), value :: sz
            character(kind=c_char), intent(out) :: nm
        end subroutine
   end interface
   save
   integer iProcIndex,iProcMinE,iProcMaxE
   integer nProcessors

#ifndef PARALLEL
   integer, parameter :: MPI_2INTEGER=0
   integer, parameter :: MPI_MIN=0
   integer, parameter :: MPI_MAX=0
   integer, parameter :: MPI_SUM=0
   integer, parameter :: MPI_LOR=0
   integer, parameter :: MPI_MAXLOC=0
   integer, parameter :: MPI_MINLOC=0
   integer, parameter :: MPI_MAX_ERROR_STRING=255
#endif


   
Contains



Subroutine MPIInit(tExternal)
   != Determine the number of processors, and fork each off to its own NodeFile output file
   !=
   != In:
   !=   tExternal True if using VASP/CPMD's MPI interface, so we don't have to initialise our own.
   implicit none
   logical, intent(in) :: tExternal
   integer ierr
   integer a,g
   character*20 NodeFile
   logical, save :: initialised=.false.
#if PARALLEL

   if (.not.initialised) then

       if(tExternal) then
         write(6,*) 'Using CPMD MPI configuration'
       else 
         write(6,*) 'Initing MPI'

         call MPI_INIT(ierr)
         if (ierr .ne. MPI_SUCCESS) then
            call Stop_All("MPIInit",'Error starting MPI program. Terminating.')
         end if
       endif
       call MPI_COMM_RANK(MPI_COMM_WORLD, iProcIndex, ierr)
       call MPI_COMM_SIZE(MPI_COMM_WORLD, nProcessors, ierr)
       WRITE(6,*) "Number of processors: ",nProcessors

       if(tExternal) then
          write(6,*) "NECI Processor ",iProcIndex+1,'/',nProcessors
       else
!Test if I/O is allowed on all processors - get res, the attribute attached to the communicator concerning I/O
!This does not seem to work...
!      CALL MPI_Comm_get_attr(MPI_COMM_SELF,MPI_IO,res,flag,ierr)
!flag will say if can do I/O
!      Local_IO=(ierr.eq.MPI_SUCCESS.and.flag.and.res.ne.MPI_PROC_NULL)
!      IF(.not.Local_IO) THEN
!          WRITE(6,*) ierr,Local_IO,flag,res
!          CALL Stop_All('MPIInit',"IO not possible on this processor")
!      ELSE
!          WRITE(6,*) "IO possible on this processor"
!          CALL FLUSH(6)
!      ENDIF

          if(iProcIndex.eq.0) then
             write(6,*) "Processor ",iProcIndex+1,'/',nProcessors, ' as head node.'
          else

             write(6,*) "Processor ",iProcIndex+1,'/',nProcessors, ' moving to local output.'
             if (iProcIndex.lt.9) then
                 write (NodeFile,'(a,i1)') 'NodeFile',iProcIndex+1
             elseif(iProcIndex.lt.99) then
                 write (NodeFile,'(a,i2)') 'NodeFile',iProcIndex+1
             elseif(iProcIndex.lt.999) then
                 write (NodeFile,'(a,i3)') 'NodeFile',iProcIndex+1
             else
                 write (NodeFile,'(a,i4)') 'NodeFile',iProcIndex+1
             end if
             write(6,*) "outfile=",NodeFile
             close(6,status="keep")
             open(6,file=NodeFile)
             write(6,*) "Processor ",iProcIndex+1,'/',nProcessors, ' on local output.'
          endif
          call GetProcElectrons(iProcIndex,iProcMinE,iProcMaxE) 
          CommGlobal=MPI_COMM_WORLD
!  Just synchronize everything briefly
          a=iProcIndex+1
          call MPISumAll(a,1,g)
          WRITE(6,*) "Sum: ",g
       endif

       call MPI_ERRHANDLER_SET(MPI_COMM_WORLD,MPI_ERRORS_RETURN,ierr)
   end if

#else 

   ! Dummy set up for serial work.
   iProcIndex=0
   nProcessors=1
#endif
   if(.not.initialised) Call MPINodes()
   initialised=.true.
   RETURN
   
end subroutine

! Create communicators for within and between each of the nodes


subroutine MPINodes
   use, intrinsic :: iso_c_binding
   implicit none
   integer Group,i,j,n
   integer(c_size_t) length
   character(len=30) nm
   character(len=30) nm2
   character(len=30) nms(0:nProcessors-1)
   integer ierr
   integer GroupProc(nProcessors)
   allocate(Nodes(0:nProcessors-1))
   allocate(NodeRoots(0:nProcessors-1))
#ifdef PARALLEL
   call MPI_Comm_Group(CommGlobal,Group,ierr)
   length=30
   call gethostname(nm,length)
   do i=1,30
      if (nm(i:i)==char(0)) then
         nm(i:30)=' '
         exit
      endif
   enddo
   nm2=nm
   call MPI_Gather(nm2,30,MPI_CHARACTER,nms,30,MPI_CHARACTER,root,CommGlobal,ierr)
   write(6,*) "Processor      Node hostname"
   if(iProcIndex==root) then
      nNodes=0
      do i=0,nProcessors-1
         Nodes(i)%n=-1
         do j=0,nNodes-1
            if (nms(i)==nms(NodeRoots(j))) then
               Nodes(i)%n=j
               exit
            endif 
         enddo
         if (Nodes(i)%n==-1) then
            NodeRoots(nNodes)=i
            Nodes(i)%n=nNodes
            nNodes=nNodes+1
         endif
         write(6,"(2I10,A,A)") i,Nodes(i)%n," ",nms(i)
      enddo
   endif
   call MPI_BCAST (nNodes, 1, MPI_INTEGER, root, CommGlobal, ierr)
   call MPI_BCAST (Nodes, nProcessors, MPI_INTEGER, root, CommGlobal, ierr)
   call MPI_BCAST (NodeRoots, nProcessors, MPI_INTEGER, root, CommGlobal, ierr)
   allocate(NodeLengths(0:nNodes-1))
   allocate(CommNodes(0:nNodes-1))
   allocate(GroupNodes(0:nNodes-1))
   Node=Nodes(iProcIndex)
   if (iProcIndex==NodeRoots(Node%n)) then
      bNodeRoot=.true.
      write(6,*) "I am the node root for node ", Node%n
   else
      bNodeRoot=.false.
   endif
   do i=0, nNodes-1
      n=0
      do j=0,nProcessors-1
         if(Nodes(j)%n==i) then
            n=n+1
            GroupProc(n)=j
         endif
      enddo
      NodeLengths(i)=n
      call MPI_Group_incl(Group,n,GroupProc,GroupNodes(i),ierr)  !Create a group 
      call MPI_Comm_Create(CommGlobal,GroupNodes(i),CommNodes(i),ierr) !Create the Communicator
   enddo
#else
   nNodes=1
   allocate(NodeLengths(0:nNodes-1))
   allocate(CommNodes(0:nNodes-1))
   allocate(GroupNodes(0:nNodes-1))
   NodeLengths(0)=1
#endif //def PARALLEL
   Roots%n=-1  !A communicator index between roots
end subroutine

Subroutine MPIEnd(tExternal)
   !=  Shutdown our MPI Interface if we're not using CPMD/VASP's
   !=
   != In:
   !=   tExternal Set if using an external program's MPI interface
   !=             (currently CPMD or VASP), in which case the external
   !=             program handles MPI termination.
   implicit none
   logical tExternal
   integer ierr
#if PARALLEL
   if(.not.tExternal) then
      call MPI_FINALIZE(ierr)
   endif
#endif
end subroutine



Subroutine MPIStopAll(error_str)
   !=  Abort all processors.
   !=  
   !=  In:
   !=     error_str: parameter string containing error used as argument to STOP.
   character(3) :: error_str
   integer error_code,ierror
#if PARALLEL
   ! errorcode: Error returned to invoking environment.
   ! ierror: error status (of abort: was abort successful?)
   ! Currently neither are analysed.
   call MPI_ABORT(MPI_COMM_WORLD, error_code, ierror)
   WRITE(6,*) error_str
   CALL FLUSH(6)
   stop
#endif
end subroutine

Subroutine GetProcElectrons(iProcIndex,iMinElec,iMaxElec)
   !=  Choose min and max electrons such that ordered pairs are distributed evenly across processors
   !=
   !=  In:
   !=     iProcIndex  Index of this processor (starting at 1).
   !=  Out:
   !=     iMinElec    First electron to allocate to this processor.
   !=     iMaxElec    Last electron to allocate to this processor.
   use SystemData, only: nEl
   implicit none
   integer iProcIndex,iMinElec,iMaxElec
   real*8 nCur
#ifdef PARALLEL
!Invert X=n(n-1)/2
   nCur=((nProcessors+1-iProcIndex)*nEl*(nEl-1.d0)/nProcessors)

   nCur=nEl+1-(1+sqrt(1.d0+4*nCur))/2
 !Hitting smack bang on an integer causes problems
   if(ceiling(nCur).eq.floor(nCur)) nCur=nCur-1e-6
   iMinElec=ceiling(nCur)
   if(iProcIndex.eq.1) iMinElec=1
   nCur=((nProcessors-iProcIndex)*nEl*(nEl-1.d0)/nProcessors)
   nCur=nEl+1-(1+sqrt(1.d0+4*nCur))/2
 !Hitting smack bang on an integer causes problems
   if(ceiling(nCur).eq.floor(nCur)) nCur=nCur-1e-6
   iMaxElec=floor(nCur)
   if(iProcIndex.eq.nProcessors) iMaxElec=nEl
#else
   ! Serial calculation: all electrons on one processor.
   iMinElec=1
   iMaxElec=nEl
#endif
end subroutine

Subroutine MPIBarrier(error)
    INTEGER :: error
#ifdef PARALLEL
    CALL MPI_Barrier(MPI_COMM_WORLD,error)
#endif
end subroutine

end supermodule
