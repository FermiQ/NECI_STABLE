
!C.. This version creates a star of all 2-vertex terms by using Jacobi
!C.. Rotations to disconnect terms in the star

!C.. 1/6/05 - This will not work - as one disconnects a matrix
!C.. progressively, the sparsity in the remaining elements decreases
!C.. dramatically.  Code unfinished
      REAL*8 FUNCTION FMCPR3STARJ(NI,BETA,I_P,NEL,
     &   NBASISMAX,G1,NBASIS,BRR,NMSH,FCK,NMAX,ALAT,UMAT,NTAY,
     &   RHOEPS,LSTE,ICE,LIST,L,LT,NWHTAY,
     &   ILOGGING,TSYM,ECORE,ILMAX,DBETA,DLWDB)

         use determinants, only: get_helement
         use constants, only: dp

         IMPLICIT NONE
         INTEGER I_V,NEL,I_P,nBasisMax(5,*),G1(*),NBASIS,BRR(*),NMSH
         INTEGER NTAY(2),NWHTAY,ILOGGING,LT,NMAX
         REAL*8 FCK(*), ALAT(*),UMAT(*),ECORE
         INTEGER NI(NEL),ILMAX
!C.. LSTE is a list of excitations (which we will generate)
!C.. ICE is the IC of each excitation (i.e. how much it differs from us (INODE)
         INTEGER LSTE(NEL,0:ILMAX)
         INTEGER ICE(0:ILMAX)
!C.. This will contain all the info needed to work out the value of the
!C.. star
!C.. LIST(0,...) corresponds to J=I
!C.. LIST(J,0) = RHOJJ
!C.. LIST(J,1) = RHOIJ
!C.. LIST(J,2) = HIJ

         REAL*8 LIST(0:ILMAX,0:2)
         REAL*8 BETA,RHOEPS
         LOGICAL TSYM
         REAL*8 DBETA,DLWDB
         INTEGER NLIST,NLCUR,I,J,L

         REAL*8 RH,RHII
         INTEGER NCONN,NCUR,NPTR

         REAL*8 CONMAT(*)
         INTEGER CONLIST(*)
         LOGICAL TBR

         POINTER (IP_CONMAT,CONMAT),(IP_CONLIST,CONLIST)

         REAL*8 TH,C,S,T,TAU,ARP,ARQ
         INTEGER IPTR,JPTR
         HElement_t :: hel
         CALL NECI_ICOPY(NEL,NI,1,LSTE(1,0),1)
         ICE(0)=0
         NLIST=ILMAX
         CALL GENEXCIT(NI,ABS(NTAY(1)*2),NBASIS,NEL,
     &         LSTE(1,1),ICE(1),NLIST,1,G1,TSYM,
     &         NBASISMAX,.FALSE.)
         IF(NLIST.GT.ILMAX) THEN
            WRITE(6,*) "WARNING on excitations"
         ENDIF

!C.. Allocate storage space for the connections
         NCONN=SQRT(NLIST+0.D0)+1
         IF(NCONN.LT.20) NCONN=20
         NCONN=NCONN*(NLIST+1)
         CALL N_MEMORY(IP_CONMAT,NCONN,"CONMAT")
         CALL N_MEMORY(IP_CONLIST,NCONN,"CONLIST")

         NLCUR=0
         DO I=0,NLIST
            IF(ICE(I).EQ.0.AND.I.GT.0) LSTE(1,I)=0
            IF(LSTE(1,I).NE.0) THEN
               CALL CALCRHO2(NI,LSTE(1,I),BETA,I_P,NEL,
     &            NBASISMAX,G1,NBASIS,BRR,NMSH,FCK,NMAX,ALAT,UMAT,
     &            RH,NTAY,ICE(I),ECORE)
               IF(ABS(RH).GT.RHOEPS) THEN
                  IF(NLCUR.NE.I)
     &              CALL NECI_ICOPY(NEL,LSTE(1,I),1,
     &                    LSTE(1,NLCUR),1)
                  ICE(NLCUR)=ICE(I)
                  IF(NLCUR.EQ.0) RHII=RH
                  LIST(NLCUR,1)=RH/RHII
                  CALL CALCRHO2(LSTE(1,I),LSTE(1,I),BETA,I_P,NEL,
     &             NBASISMAX,G1,NBASIS,BRR,NMSH,FCK,NMAX,ALAT,UMAT,
     &              RH,NTAY,0,ECORE)
                  LIST(NLCUR,0)=RH/RHII
                  hel = get_helement (nI, lste(:,I))
                  LIST(NLCUR,2) = hel
!C                  WRITE(6,*) (LIST(NLCUR,J),J=0,2)
                  NLCUR=NLCUR+1
               ENDIF
            ENDIF
         ENDDO
         L=NLCUR
         LT=ILMAX+1


!C.. we now have a list length NLCUR of dets in the star.
!C.. we now need to modify this with jacobi rotations to make a star
!C.. which is equivalent to the fully connected system

!C.. The first NLCUR elements of CONLIST are the index of the start of
!C.. list of connections for that node.

!C.. i.e. CONLIST(CONLIST(3)+5) is the sixth connection from the 3rd
!C.. node.

!C.. the first part of free space in NLIST
         CONLIST(1)=NLCUR+2
         DO I=1,NLCUR
!C.. First list all the connections to the current node I to nodes after
!C.. it
            DO J=I+1,NLCUR
               CALL CALCRHO2(LSTE(1,I),LSTE(1,J),BETA,I_P,NEL,
     &             NBASISMAX,G1,NBASIS,BRR,NMSH,FCK,NMAX,ALAT,UMAT,
     &              RH,NTAY,-1,ECORE)
               IF(ABS(RH).GT.RHOEPS) THEN
                  IF(CONLIST(I)+NCUR.GT.NCONN)
     &               STOP 'Too many connections in FMCPR3STARJ'
                  CONLIST(CONLIST(I)+NCUR)=J
                  CONMAT(CONLIST(I)+NCUR)=RH
                  NCUR=NCUR+1
               ENDIF
            ENDDO
            CONLIST(I+1)=CONLIST(I)+NCUR
!C.. now loop over all connections to I before it and jacobi rotate them
!C.. to remove them
            DO J=1,I-1
               NCUR=CONLIST(J)
               DO WHILE(CONLIST(NCUR).LE.J.AND.NCUR.LT.CONLIST(J+1))
                  IF(CONLIST(NCUR).EQ.J) THEN
!C.. we've found a previous node (J) connected to us (I)
!C.. do a Jacobi Rotation to set rho_ij=0 (Numerical recipes)
                     TH=(LIST(I,0)-LIST(J,0))/(2.D0*CONMAT(NCUR))
!C.. This needs fixing
!C                     T=DSIGN(TH)/(ABS(TH)+SQRT(TH*TH+1.D0))
                     C=1/SQRT(T*T+1)
                     S=T*C
                     TAU=S/(1+C)
!C.. p'=c p - s q (I)
!C.. q'=s p + c q (J)
                     LIST(I,0)=LIST(I,0)-T*CONMAT(NCUR)
                     LIST(J,0)=LIST(J,0)+T*CONMAT(NCUR)
!C.. transform rho_ip and H_ip
                     ARP=LIST(I,1)
                     ARQ=LIST(J,1)
                     LIST(I,1)=ARP-S*(ARQ+TAU*ARP)
                     LIST(J,1)=ARQ+S*(ARP-TAU*ARQ)
                     ARP=LIST(I,2)
                     ARQ=LIST(J,2)
                     LIST(I,2)=ARP-S*(ARQ+TAU*ARP)
                     LIST(J,2)=ARQ+S*(ARP-TAU*ARQ)
!C.. Go through lists for I and J's connections, and transform them
                     IPTR=CONLIST(I)
                     JPTR=CONLIST(J)
                     DO WHILE(IPTR.LT.CONLIST(I+1)
     &                  .OR.JPTR.LT.CONLIST(J+1))
!C.. Increment IPTR and JPTR to point to something
                        DO WHILE(CONLIST(IPTR).EQ.0
     &                     .AND.IPTR.LT.CONLIST(I+1))
                           IPTR=IPTR+1
                        ENDDO
                        DO WHILE(CONLIST(JPTR).EQ.0
     &                     .AND.JPTR.LT.CONLIST(J+1))
                           JPTR=JPTR+1
                        ENDDO
                        IF(CONLIST(IPTR).LT.CONLIST(JPTR)
     &                     .OR.JPTR.EQ.CONLIST(J+1)) THEN
!C.. Just do the I as it's earlier
                           ARP=CONMAT(IPTR)
                           ARQ=0.D0
                           LIST(I,2)=ARP-S*(ARQ+TAU*ARP)
                           LIST(J,2)=ARQ+S*(ARP-TAU*ARQ)
                           IPTR=IPTR+1
                        ELSEIF(CONLIST(IPTR).GT.CONLIST(JPTR)
     &                     .OR.IPTR.EQ.CONLIST(I+1)) THEN
!C.. Just to J as it's earlier
                           JPTR=JPTR+1
                        ELSE
!C.. both are connected to the same node so do both at the same time
                           IPTR=IPTR+1
                           JPTR=JPTR+1
                        ENDIF
                     ENDDO
                  ENDIF
               ENDDO
            ENDDO
         ENDDO


!C.. Call a routine to generate the value of the star
         IF(NWHTAY.EQ.0) THEN
            CALL STARDIAG(LSTE,NEL,NLCUR,LIST,
     &         ILMAX+1,I_P,FMCPR3STARJ,DBETA,DLWDB)
         ELSE
            CALL STARDIAG2(LSTE,NEL,NLCUR,LIST,
     &         ILMAX+1,I_P,FMCPR3STARJ,DBETA,DLWDB)
         ENDIF
      END




