#####################
# Scalar values
#####################

[int]
dim=:
rank=1
type1=integer(int32)
mpitype=MPI_INTEGER4
sizeb=4

[int64]
dim=:
rank=1
type1=integer(int64)
mpitype=MPI_INTEGER8
sizeb=8

[doub]
dim=:
rank=1
type1=real(dp)
mpitype=MPI_DOUBLE_PRECISION
sizeb=sizeof_dp

[comp]
dim=:
rank=1
type1=complex(dp)
mpitype=MPI_DOUBLE_COMPLEX
sizeb=(2*dp)

[comp2D]
dim=:,:
rank=2
type1=complex(dp)
mpitype=MPI_DOUBLE_COMPLEX
sizeb=(2*sizeof_dp)

#####################
# 1-D Arrays
#####################

[arr_int]
type1=integer(int32), dimension(:)
mpitype=MPI_INTEGER4
sizeb=4

[arr_int64]
type1=integer(int64), dimension(:)
mpitype=MPI_INTEGER8
sizeb=8

===================

module shared_memory_mpi
  use Parallel_neci
  use constants
  use scalar_shared_memory_mpi
  implicit none

contains

      subroutine shared_allocate_mpi (win_shm, p_shm, dims)
      use HElem
      integer(MPIArg):: win_shm

      %(type1)s, dimension(%(dim)s), pointer :: p_shm
      integer(int64):: dims(%(rank)s)

      integer(MPIArg):: disp_unit
      integer(MPIArg) :: ierr, jerr, errorclass, length
      integer(kind=mpi_address_kind):: wsize
      character(255) :: string
      TYPE(C_PTR):: cptr_shm

#ifdef __SHARED_MEM

      if (iProcIndex_intra.eq.0) then
         wsize=product(dims)*(%(sizeb)s)
      else
         wsize=0
      end if

      call mpi_win_allocate_shared(wsize,int(%(sizeb)s,MPIArg),MPI_INFO_NULL,mpi_comm_intra,&
           cptr_shm,win_shm,ierr)

      if(ierr /= MPI_SUCCESS) then
         call mpi_error_class(ierr, errorclass, jerr)
         call mpi_error_string(errorclass,string, length, jerr)
         call stop_all('shared_allocate_mpi',string)
      endif

      call mpi_win_shared_query(win_shm,0_MPIArg,wsize,disp_unit,cptr_shm,ierr)

      !map to Fortran array pointer
      call c_f_pointer(cptr_shm,p_shm,dims)

      !start read/write epoch for this window
      call mpi_win_lock_all(MPI_MODE_NOCHECK,win_shm,ierr)
#else
      ! no shared memory features used
      call variadic_allocate(p_shm,dims)
#endif

    end subroutine

    subroutine shared_deallocate_mpi(win_shm,p_shm)
      integer(MPIArg):: win_shm
      %(type1)s, dimension(%(dim)s), pointer :: p_shm
      integer(MPIArg):: ierr
#ifdef __SHARED_MEM
      nullify(p_shm)
      call mpi_win_unlock_all(win_shm,ierr)
      call mpi_win_free(win_shm,ierr)
#else
      deallocate(p_shm)
#endif
    end subroutine

end module

supermodule shared_memory_mpi
use scalar_shared_memory_mpi
implicit none
contains
#ifdef __SHARED_MEM
    subroutine shared_sync_mpi(win_shm)
      integer(MPIArg):: win_shm
      integer(MPIArg):: ierr

      call mpi_win_sync(win_shm,ierr)
      call mpi_barrier(mpi_comm_intra,ierr)
    end subroutine shared_sync_mpi
#else
    subroutine shared_sync_mpi(win_shm)
      integer(MPIArg):: win_shm
    end subroutine shared_sync_mpi
#endif

end supermodule
