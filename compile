#!/bin/bash

usage() {
    cat<<END
usage: ./compile [-d] [platform]
Generate new makefiles and do a clean build of NECI using platform as the configuration.
If platform is not specified, then the platform given in .compileconf is used.
If .compileconf also doesn't exist, then the default (PC-PGI64) is used.

Options:
    -d Compile with the compiler debug options on.
    -f Fast: don't do a make clean before compiling.
    -m Only make new makefiles.
END
}

#-------------------------------------------------------------
#
# .compileconf
#
# The file .compileconf (if present) is used to override the
# default values, and can be used to set local/user defaults.
# 
# The dest, dbg_dest and platform variables are those that can
# currently be set.
# For instance, to set the destination sub-directory for optimised
# compiled objects to be dest_local, the destination sub-directory 
# for debug compiled objects to be dest_dbg_local and the default
# platform to be PC-ifort64, then .compileconf should contain::

#    platform=PC-ifort64
#    dest=dest_local
#    dbg_dest=dest_dbg_local

# This makes switching between debug and optimised versions 
# much faster, as a clean build is not necessary.
# Note that compile will add/remove a debug variable from 
# .compileconf as appropriate, for use with the master Makefile.

#-------------------------------------------------------------

dest='dest' # default destination of compiled objects.
dbg_dest='' # Set later (via .compileconf).
platform=PC-PGI64

dbg_flag=''
compile=1
fast=0

while getopts 'dfmh' options; do
    case $options in
        d)  dbg_flag='-d';;
        f)  fast=1 ;;
        m)  compile=0 ;;
        h)  usage
            exit 1;;
        \?) usage
            exit 1;;
        *)  usage
            exit 1;;
    esac
done

# Remove flags from argument list
shift $(($OPTIND - 1))

if [ "$#" -ne 0 ]; then
	platform=$1
elif [ -e .compileconf ]; then
	# Read the user's default platform (if the .compileconf exists 
	# in the current working directory).
    grep -q '=' .compileconf
    if [[ $? -eq 1 && -s .compileconf ]]; then
        # Old style format: contains just the platform as a bareword
        # (and is not just an empty file).
        platform=`cat .compileconf`
    else
        # New format.  Contains config info in the form:
        # platform=ix86-gfortran32
        # etc.
        . .compileconf
    fi
fi
echo "Using platform: $platform"

if [ "$dbg_flag" == "-d" ]; then
    if [ "$dbg_dest" == "" ]; then
        dest=$dest
    else
        dest=$dbg_dest
    fi
    if grep -q '=' .compileconf; then
        if ! grep -q "dbg_on" .compileconf; then
            echo -e "# Remove dbg_on line to change back to using the optimised code in the main Makefile without having to produce new makefiles.\ndbg_on='y'" >> .compileconf
        fi
    fi
else
    perl -ni -e 'print if (! /dbg_on/);' .compileconf
fi

./mkconfig.sh $dbg_flag $platform -DEST=${PWD}/DESTDIR > mktemplate

kdest='k'$dest

test ! -d $dest && mkdir $dest
test ! -d $kdest && mkdir $kdest

cp irat.inc $dest/
cp irat.inc $kdest/
sed -e 's/#CMPLXFLAG//' -e "s/DESTDIR/$dest/" mktemplate > $dest/Makefile
sed -e 's/#CMPLXFLAG/-D__CMPLX/' -e "s/DESTDIR/$kdest/"  mktemplate > $kdest/Makefile

if [[ $compile -eq 1 ]]; then
    if [[ $fast -eq 0 ]]; then
        echo "make clean"
        touch *.F *.F90
        make clean
    fi
    cd $dest
    make neci.x
    stat=$?
    cd ..
    if [[ $stat -eq 0 && ! -e neci.x ]]; then
        ln -s $dest/neci.x neci.x
    fi
fi
exit $stat
