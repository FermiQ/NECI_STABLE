#!/bin/bash

usage() {
    cat<<END
usage: ./compile [-d] [platform]
Generate new makefiles and do a clean build of NECI using platform as the configuration.
If platform is not specified, then the platform given in .compileconf is used.
If .compileconf also doesn't exist, then the default (PC-PGI64) is used.

Options:
    -d Compile with the compiler debug options on.
    -f Fast: don't do a make clean before compiling.
    -m Only make new makefiles.
END
}

dbgflag=''
compile=1
fast=0

while getopts 'dfmh' options; do
    case $options in
        d)  dbgflag='-d';;
        f)  fast=1 ;;
        m)  compile=0 ;;
        h)  usage
            exit 1;;
        \?) usage
            exit 1;;
        *)  usage
            exit 1;;
    esac
done

# Remove flags from argument list
shift $(($OPTIND - 1))

if [ "$#" -ne 0 ]; then
	platform=$1
elif [ -e .compileconf ]; then
	# Read the user's default platform (if the .compileconf exists 
	# in the current working directory).
	platform=`cat .compileconf`
else
	platform=PC-PGI64
fi

echo "Using platform: $platform"

./mkconfig.sh $dbgflag $platform -DEST=${PWD}/DESTDIR > mktemplate

test ! -d dest && mkdir dest
test ! -d kdest && mkdir kdest

cp irat.inc dest/
cp irat.inc kdest/
sed -e 's/#CMPLXFLAG//' -e "s/DESTDIR/dest/" mktemplate > dest/Makefile
sed -e 's/#CMPLXFLAG/-D__CMPLX/' -e "s/DESTDIR/kdest/"  mktemplate > kdest/Makefile

if [[ $compile -eq 1 ]]; then
    if [[ $fast -eq 0 ]]; then
        echo "make clean"
        touch *.F *.F90
        make clean
    fi
    cd dest
    make neci.x
    stat=$?
    cd ..
    if [[ $stat -eq 0 && ! -e neci.x ]]; then
        ln -s dest/neci.x neci.x
    fi
fi
exit $stat
